CONTEXT: .NET 9 AI Project Orchestrator implementing Phase 4 - Individual Story Prompt Generation. This service transforms approved user stories into comprehensive, enterprise-grade prompts for AI coding assistants.

OBJECTIVE: Implement IPromptGenerationService that creates detailed, technical prompts for individual user story implementation.

REQUIREMENTS:

1. SERVICE ARCHITECTURE:
   - Create IPromptGenerationService interface in Domain layer
   - Implement PromptGenerationService in Application layer  
   - Add API controller with endpoints for prompt generation
   - Follow existing Clean Architecture patterns from RequirementsAnalysisService

2. CORE FUNCTIONALITY:
   - Input: Individual user story + approved project context
   - Process: Generate comprehensive coding prompt using AI (Claude)
   - Output: Detailed prompt ready for coding assistant implementation
   - Review: Submit generated prompt for human approval before use

3. PROMPT GENERATION LOGIC:
   - Load "PromptGenerator.md" instructions via IInstructionService
   - Combine user story + project architecture + coding standards
   - Generate prompt that includes:
     * Clear implementation requirements
     * Technical architecture context
     * Code structure and file organization
     * Testing requirements (unit + integration)
     * Integration points with other components
     * Acceptance criteria validation steps

4. API ENDPOINTS NEEDED:
   - POST /api/prompts/generate - Generate prompt for single user story
   - GET /api/prompts/{promptId}/status - Check generation status
   - GET /api/prompts/can-generate/{storyId} - Validate prerequisites

5. PREREQUISITE VALIDATION:
   - Verify user stories are approved before prompt generation
   - Check project planning is approved for architecture context
   - Validate story ID exists and is accessible

6. INTEGRATION REQUIREMENTS:
   - Extend IStoryGenerationService to provide individual story retrieval
   - Use existing IReviewService for prompt approval workflow
   - Leverage IAIClientFactory with Claude for prompt generation
   - Follow existing status tracking patterns with in-memory storage

7. INSTRUCTION FILE:
   Create Instructions/PromptGenerator.md containing:
   - Role: Enterprise prompt engineering specialist
   - Task: Transform user stories into comprehensive coding prompts
   - Output format: Structured prompt with sections for requirements, architecture, testing, validation
   - Context handling: Use project architecture + story details + coding standards
   - Examples: Sample prompts for different story types

8. DATA MODELS:
   - PromptGenerationRequest: StoryId, TechnicalPreferences, PromptStyle
   - PromptGenerationResponse: PromptId, GeneratedPrompt, ReviewId, Status
   - PromptGenerationStatus: Processing, PendingReview, Approved, Rejected, Failed

9. ERROR HANDLING:
   - Validate story approval status
   - Handle missing project context gracefully
   - Provide meaningful error messages for prerequisite failures
   - Log prompt generation operations with correlation IDs

10. TESTING REQUIREMENTS:
    - Unit tests for service functionality and validation
    - Integration tests for API endpoints
    - Test with realistic user story data
    - Verify generated prompts contain all required sections

TECHNICAL CONSTRAINTS:
- Follow existing Clean Architecture patterns exactly
- Use same dependency injection registration approach
- Maintain async/await with CancellationToken support
- Use existing logging and error handling patterns
- No database changes - continue with in-memory storage

EXPECTED PROMPT OUTPUT EXAMPLE:
Generated prompts should follow this structure: