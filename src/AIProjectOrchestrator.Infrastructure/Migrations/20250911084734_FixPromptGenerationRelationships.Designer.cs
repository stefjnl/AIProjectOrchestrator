// <auto-generated />
using System;
using System.Collections.Generic;
using AIProjectOrchestrator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AIProjectOrchestrator.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911084734_FixPromptGenerationRelationships")]
    partial class FixPromptGenerationRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.ProjectPlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlanningId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequirementsAnalysisId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId")
                        .IsUnique();

                    b.HasIndex("RequirementsAnalysisId")
                        .HasDatabaseName("IX_ProjectPlanning_RequirementsAnalysisId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProjectPlanning_Status");

                    b.ToTable("ProjectPlannings");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.PromptGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PromptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StoryGenerationId")
                        .HasColumnType("integer");

                    b.Property<int>("StoryIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserStoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromptId")
                        .IsUnique();

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_PromptGeneration_Status");

                    b.HasIndex("StoryGenerationId");

                    b.HasIndex("UserStoryId")
                        .HasDatabaseName("IX_PromptGeneration_UserStoryId");

                    b.ToTable("PromptGenerations");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.PromptTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("PromptTemplates");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.RequirementsAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalysisId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique();

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_RequirementsAnalysis_ProjectId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_RequirementsAnalysis_Status");

                    b.ToTable("RequirementsAnalyses");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PipelineStage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProjectPlanningId")
                        .HasColumnType("integer");

                    b.Property<int?>("PromptGenerationId")
                        .HasColumnType("integer");

                    b.Property<int?>("RequirementsAnalysisId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StoryGenerationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Review_CreatedDate");

                    b.HasIndex("PipelineStage");

                    b.HasIndex("ProjectPlanningId")
                        .IsUnique();

                    b.HasIndex("PromptGenerationId")
                        .IsUnique();

                    b.HasIndex("RequirementsAnalysisId")
                        .IsUnique();

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("ServiceName");

                    b.HasIndex("Status");

                    b.HasIndex("StoryGenerationId")
                        .IsUnique();

                    b.HasIndex("PipelineStage", "Status")
                        .HasDatabaseName("IX_Review_PipelineStage_Status");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.StoryGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GenerationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectPlanningId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StoriesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId")
                        .IsUnique();

                    b.HasIndex("ProjectPlanningId")
                        .HasDatabaseName("IX_StoryGeneration_PlanningId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_StoryGeneration_Status");

                    b.ToTable("StoryGenerations");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.UserStory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("AcceptanceCriteria")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EstimatedComplexity")
                        .HasColumnType("text");

                    b.Property<bool>("HasPrompt")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromptId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StoryGenerationId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoryPoints")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoryGenerationId");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.ProjectPlanning", b =>
                {
                    b.HasOne("AIProjectOrchestrator.Domain.Entities.RequirementsAnalysis", "RequirementsAnalysis")
                        .WithMany("ProjectPlannings")
                        .HasForeignKey("RequirementsAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequirementsAnalysis");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.PromptGeneration", b =>
                {
                    b.HasOne("AIProjectOrchestrator.Domain.Entities.StoryGeneration", null)
                        .WithMany("PromptGenerations")
                        .HasForeignKey("StoryGenerationId");

                    b.HasOne("AIProjectOrchestrator.Domain.Entities.UserStory", "UserStory")
                        .WithMany("PromptGenerations")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.RequirementsAnalysis", b =>
                {
                    b.HasOne("AIProjectOrchestrator.Domain.Entities.Project", "Project")
                        .WithMany("RequirementsAnalyses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.Review", b =>
                {
                    b.HasOne("AIProjectOrchestrator.Domain.Entities.ProjectPlanning", "ProjectPlanning")
                        .WithOne("Review")
                        .HasForeignKey("AIProjectOrchestrator.Domain.Entities.Review", "ProjectPlanningId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AIProjectOrchestrator.Domain.Entities.PromptGeneration", "PromptGeneration")
                        .WithOne("Review")
                        .HasForeignKey("AIProjectOrchestrator.Domain.Entities.Review", "PromptGenerationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AIProjectOrchestrator.Domain.Entities.RequirementsAnalysis", "RequirementsAnalysis")
                        .WithOne("Review")
                        .HasForeignKey("AIProjectOrchestrator.Domain.Entities.Review", "RequirementsAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AIProjectOrchestrator.Domain.Entities.StoryGeneration", "StoryGeneration")
                        .WithOne("Review")
                        .HasForeignKey("AIProjectOrchestrator.Domain.Entities.Review", "StoryGenerationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectPlanning");

                    b.Navigation("PromptGeneration");

                    b.Navigation("RequirementsAnalysis");

                    b.Navigation("StoryGeneration");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.StoryGeneration", b =>
                {
                    b.HasOne("AIProjectOrchestrator.Domain.Entities.ProjectPlanning", "ProjectPlanning")
                        .WithMany("StoryGenerations")
                        .HasForeignKey("ProjectPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectPlanning");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.UserStory", b =>
                {
                    b.HasOne("AIProjectOrchestrator.Domain.Entities.StoryGeneration", "StoryGeneration")
                        .WithMany("Stories")
                        .HasForeignKey("StoryGenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoryGeneration");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.Project", b =>
                {
                    b.Navigation("RequirementsAnalyses");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.ProjectPlanning", b =>
                {
                    b.Navigation("Review");

                    b.Navigation("StoryGenerations");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.PromptGeneration", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.RequirementsAnalysis", b =>
                {
                    b.Navigation("ProjectPlannings");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.StoryGeneration", b =>
                {
                    b.Navigation("PromptGenerations");

                    b.Navigation("Review");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("AIProjectOrchestrator.Domain.Entities.UserStory", b =>
                {
                    b.Navigation("PromptGenerations");
                });
#pragma warning restore 612, 618
        }
    }
}
