@page "/review/{ReviewId:guid}"

<PageTitle>Review Workspace</PageTitle>

<h1>Review Workspace</h1>

@if (review == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4>Review: @review.ServiceName</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Content</label>
                        <div class="border p-3">
                            @((MarkupString)review.Content)
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="feedback" class="form-label">Feedback</label>
                        <textarea id="feedback" class="form-control" @bind="feedback"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <button class="btn btn-success" @onclick="ApproveReview">Approve</button>
                        <button class="btn btn-danger ms-2" @onclick="RejectReview">Reject</button>
                        <button class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid ReviewId { get; set; }

    private ReviewSubmission? review;
    private string feedback = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadReview();
    }

    private async Task LoadReview()
    {
        try
        {
            review = await APIClient.GetReviewAsync(ReviewId);
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading review: {ex.Message}");
        }
    }

    private async Task ApproveReview()
    {
        try
        {
            var success = await APIClient.ApproveReviewAsync(ReviewId, feedback);
            if (success)
            {
                Navigation.NavigateTo("/review");
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error approving review: {ex.Message}");
        }
    }

    private async Task RejectReview()
    {
        try
        {
            var success = await APIClient.RejectReviewAsync(ReviewId, feedback);
            if (success)
            {
                Navigation.NavigateTo("/review");
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error rejecting review: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/review");
    }

    [Inject]
    private IAPIClient APIClient { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
}