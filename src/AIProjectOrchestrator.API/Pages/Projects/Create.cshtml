@page
@{
    ViewData["Title"] = "Create Project";
}

<div class="main-container">
    <div class="page-header">
        <h1>Create New Project</h1>
        <p class="subtitle">Define your project requirements and let AI orchestrate the development process</p>
    </div>

    <div class="form-container">
        <form id="create-project-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="project-name" class="form-label">Project Name *</label>
                    <input type="text" id="project-name" name="name" class="form-input" required
                        placeholder="Enter project name">
                </div>
                <div class="form-group">
                    <label for="project-type" class="form-label">Project Type</label>
                    <select id="project-type" name="type" class="form-select">
                        <option value="web">Web Application</option>
                        <option value="mobile">Mobile App</option>
                        <option value="api">API Service</option>
                        <option value="desktop">Desktop Application</option>
                        <option value="other">Other</option>
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label for="project-description" class="form-label">Project Description *</label>
                <textarea id="project-description" name="description" class="form-textarea" required
                    placeholder="Describe your project goals, features, and requirements..."></textarea>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="tech-stack" class="form-label">Tech Stack</label>
                    <input type="text" id="tech-stack" name="techStack" placeholder="e.g., React, Node.js, PostgreSQL">
                </div>
                <div class="form-group">
                    <label for="timeline" class="form-label">Timeline</label>
                    <select id="timeline" name="timeline" class="form-select">
                        <option value="1-2 weeks">1-2 weeks</option>
                        <option value="3-4 weeks">3-4 weeks</option>
                        <option value="1-2 months">1-2 months</option>
                        <option value="3-6 months">3-6 months</option>
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label for="requirements" class="form-label">Detailed Requirements</label>
                <textarea id="requirements" name="requirements" class="form-textarea"
                    placeholder="Provide detailed requirements, user stories, acceptance criteria..."></textarea>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary" id="submit-btn">
                    <span>ðŸš€</span> Create Project & Start AI Analysis
                </button>
                <a href="/" class="btn btn-secondary">Cancel</a>
            </div>
        </form>

        <!-- Real-time Preview -->
        <div class="preview-section" id="preview-section" style="display: none;">
            <h3>Project Preview</h3>
            <div class="preview-content" id="preview-content">
                <!-- Preview will be generated here -->
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loading-overlay" style="display: none;">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <h3>Creating Project...</h3>
            <p>Initiating AI analysis of your requirements</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('create-project-form');
            const previewSection = document.getElementById('preview-section');
            const previewContent = document.getElementById('preview-content');
            const loadingOverlay = document.getElementById('loading-overlay');

            // Real-time preview
            const formInputs = form.querySelectorAll('input, textarea, select');
            formInputs.forEach(input => {
                input.addEventListener('input', updatePreview);
                input.addEventListener('change', updatePreview);
            });

            function updatePreview() {
                const formData = new FormData(form);
                const data = Object.fromEntries(formData);

                if (data.name || data.description) {
                    previewSection.style.display = 'block';
                    previewContent.innerHTML = `
                                                <div class="preview-card">
                                                    <h4>${data.name || 'Untitled Project'}</h4>
                                                    <p class="preview-description">${data.description || 'No description provided'}</p>
                                                    <div class="preview-meta">
                                                        ${data.type ? `<span>Type: ${data.type}</span>` : ''}
                                                        ${data.techStack ? `<span>Tech Stack: ${data.techStack}</span>` : ''}
                                                        ${data.timeline ? `<span>Timeline: ${data.timeline}</span>` : ''}
                                                    </div>
                                                </div>
                                            `;
                } else {
                    previewSection.style.display = 'none';
                }
            }

            // Form submission
            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const submitBtn = document.getElementById('submit-btn');
                const originalText = submitBtn.innerHTML;

                try {
                    console.log('Form submission started');

                    // Use the global setLoading function from App
                    submitBtn.classList.add('btn-loading');
                    submitBtn.disabled = true;
                    loadingOverlay.style.display = 'flex';

                    const formData = new FormData(form);
                    const projectData = Object.fromEntries(formData);

                    console.log('Project data extracted:', projectData);

                    // Validate required fields
                    if (!projectData.name || !projectData.description) {
                        throw new Error('Project name and description are required');
                    }

                    // Check if APIClient is available
                    console.log('APIClient available:', typeof APIClient !== 'undefined');
                    if (typeof APIClient === 'undefined') {
                        throw new Error('APIClient is not available. Please check if api.js is loaded.');
                    }

                    console.log('Calling APIClient.createProject with data:', projectData);

                    // Create project
                    const project = await APIClient.createProject(projectData);

                    console.log('Project created successfully:', project);

                    // Show success and redirect
                    if (window.App && window.App.showNotification) {
                        window.App.showNotification('Project created successfully! Starting AI analysis...', 'success');
                    } else {
                        console.log('Project created successfully!');
                    }

                    setTimeout(() => {
                        console.log('Redirecting to workflow page with projectId:', project.id);
                        window.location.href = `/Projects/Workflow?projectId=${project.id}&newProject=true`;
                    }, 1500);

                } catch (error) {
                    console.error('Error in form submission:', error);

                    // Handle API error using the global notification system
                    let errorMessage = 'Failed to create project';
                    if (error.message) {
                        errorMessage += `: ${error.message}`;
                    } else if (error.statusText) {
                        errorMessage += `: ${error.statusText}`;
                    }

                    if (window.App && window.App.showNotification) {
                        window.App.showNotification(errorMessage, 'error');
                    } else {
                        alert(errorMessage);
                    }
                } finally {
                    // Restore button state
                    submitBtn.classList.remove('btn-loading');
                    submitBtn.disabled = false;
                    loadingOverlay.style.display = 'none';
                }
            });

            // Add loading spinner CSS
            const style = document.createElement('style');
            style.textContent = `
                                        .loading-overlay {
                                            position: fixed;
                                            top: 0;
                                            left: 0;
                                            right: 0;
                                            bottom: 0;
                                            background: rgba(0, 0, 0, 0.5);
                                            display: flex;
                                            align-items: center;
                                            justify-content: center;
                                            z-index: 10000;
                                        }
                
                                        .loading-content {
                                            background: white;
                                            padding: 2rem;
                                            border-radius: 12px;
                                            text-align: center;
                                            max-width: 400px;
                                        }
                
                                        .loading-spinner {
                                            width: 40px;
                                            height: 40px;
                                            border: 4px solid var(--color-gray-200);
                                            border-top: 4px solid var(--color-primary-500);
                                            border-radius: 50%;
                                            animation: spin 1s linear infinite;
                                            margin: 0 auto 1rem;
                                        }
                
                                        @@keyframes spin {
                                            to { transform: rotate(360deg); }
                                        }
                
                                        .preview-card {
                                            background: var(--color-gray-50);
                                            padding: 1rem;
                                            border-radius: 8px;
                                            border: 1px solid var(--color-gray-200);
                                        }
                
                                        .preview-meta {
                                            margin-top: 1rem;
                                            display: flex;
                                            gap: 1rem;
                                            font-size: 0.875rem;
                                            color: var(--color-gray-600);
                                        }
                
                                        .page-header {
                                            margin-bottom: 2rem;
                                        }
                
                                        .form-container {
                                            background: white;
                                            border-radius: 12px;
                                            padding: 2rem;
                                            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
                                            border: 1px solid var(--color-gray-200);
                                        }
                
                                        .preview-section {
                                            margin-top: 2rem;
                                            padding-top: 2rem;
                                            border-top: 1px solid var(--color-gray-200);
                                        }
                
                                        .preview-section h3 {
                                            margin-bottom: 1rem;
                                        }
                                    `;
            document.head.appendChild(style);
        });
    </script>
}
