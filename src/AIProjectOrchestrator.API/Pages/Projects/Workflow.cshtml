@page
@{
    ViewData["Title"] = "Project Workflow";
    var projectId = Request.Query["projectId"];
    var newProject = Request.Query["newProject"].ToString() == "true";
}

<div class="main-container">
    <div class="page-header">
        <div>
            <h1>Project Workflow</h1>
            <p class="subtitle">AI-powered development pipeline</p>
        </div>
        <div class="workflow-actions">
            <a href="/Projects" class="btn btn-secondary">‚Üê Back to Projects</a>
            <button class="btn btn-primary" onclick="exportProject()">
                <span>üì•</span> Export
            </button>
        </div>
    </div>

    <!-- Project Overview -->
    <div class="project-overview" id="project-overview">
        <div class="overview-card">
            <h3>Project Information</h3>
            <div class="overview-content">
                <div class="overview-item">
                    <span class="label">Name:</span>
                    <span class="value" id="project-name">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Status:</span>
                    <span class="value status" id="project-status">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Created:</span>
                    <span class="value" id="project-created">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Progress:</span>
                    <span class="value" id="project-progress">0%</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Workflow Pipeline -->
    <div class="workflow-pipeline">
        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-1">
                <span>1</span>
            </div>
            <div class="stage-title">Requirements</div>
            <div class="stage-description">Define project requirements</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-2">
                <span>2</span>
            </div>
            <div class="stage-title">Planning</div>
            <div class="stage-description">Technical architecture</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-3">
                <span>3</span>
            </div>
            <div class="stage-title">Stories</div>
            <div class="stage-description">User stories & tasks</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-4">
                <span>4</span>
            </div>
            <div class="stage-title">Prompt Review</div>
            <div class="stage-description">Review generated prompts</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-5">
                <span>5</span>
            </div>
            <div class="stage-title">Review</div>
            <div class="stage-description">Quality assurance</div>
        </div>
    </div>


    <!-- Stage Content -->
    <div class="stage-content" id="stage-content">
        <!-- Dynamic content will be loaded here based on current stage -->
        <!-- Fallback content for new projects - shown immediately -->
        <div id="fallback-content" style="display: block;">
            <div class="stage-container">
                <h2>Requirements Analysis</h2>
                <div class="empty-stage">
                    <div class="empty-icon">üöÄ</div>
                    <h3>Welcome to Your New Project!</h3>
                    <p>Let's start by analyzing your project requirements. Click the button below to begin.</p>
                    <div class="stage-actions">
                        <button class="btn btn-success btn-lg" onclick="startManualRequirementsAnalysis()"
                            style="font-size: 18px; padding: 15px 30px; background: #28a745; border-color: #28a745;">
                            üöÄ Start Requirements Analysis
                        </button>
                        <button class="btn btn-secondary" onclick="location.reload()">
                            üîÑ Refresh if Workflow Doesn't Load
                        </button>
                    </div>
                </div>
                <div class="getting-started-tips"
                    style="margin-top: 30px; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; color: white;">
                    <h4>üí° Getting Started Tips</h4>
                    <p>When you start requirements analysis, be prepared to describe:</p>
                    <ul style="text-align: left; margin: 15px 0;">
                        <li>üéØ The main problem your project solves</li>
                        <li>‚ú® Key features and functionality you need</li>
                        <li>üîß Technology preferences or constraints</li>
                        <li>‚è∞ Timeline and budget considerations</li>
                    </ul>
                    <p style="margin-top: 15px; font-style: italic;">Don't worry about being perfect - our AI will help
                        refine your requirements!</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Stage Navigation -->
    <div class="stage-navigation">
        <button class="btn btn-secondary" id="prev-stage" onclick="navigateStage(-1)" disabled>
            ‚Üê Previous
        </button>
        <span class="stage-counter" id="stage-counter">Loading stage...</span>
        <button class="btn btn-primary" id="next-stage" onclick="navigateStage(1)" disabled>
            Next ‚Üí
        </button>
    </div>
</div>

@section Scripts {
    <!-- Core services (load first) -->
    <script src="~/js/services/state-management.js"></script>
    <script src="~/js/services/stage-initialization.js"></script>
    <script src="~/js/services/event-handler.js"></script>

    <!-- Load the new modular WorkflowContentService -->
    <script src="~/js/services/workflow-content/base-content-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/requirements-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/planning-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/stories-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/prompts-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/review-generator.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/requirements-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/planning-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/stories-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/prompts-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/project-handler.js"></script>
    <script src="~/js/services/workflow-content/workflow-content-service.js"></script>
    <script src="~/js/services/workflow-content/service-bundle.js"></script>

    <!-- Main workflow manager (load last) -->
    <script src="~/js/workflow.js"></script>
    <script>
        // Enhanced workflow initialization with new project support
        async function initializeWorkflow() {
            const urlParams = new URLSearchParams(window.location.search);
            const projectId = urlParams.get('projectId');
            const newProject = urlParams.get('newProject') === 'true';

            if (!projectId) {
                alert('Project ID is required');
                window.location.href = '/Projects';
                return;
            }

            console.log('Starting workflow initialization...');

            // Wait for all modular scripts to load with retry mechanism
            const maxRetries = 20; // Increased retries
            let retries = 0;
            let modularServiceAvailable = false;

            while (retries < maxRetries && !modularServiceAvailable) {
                // Check if the new modular WorkflowContentService is available
                modularServiceAvailable = typeof WorkflowContentServiceBundle !== 'undefined' &&
                    typeof WorkflowContentService !== 'undefined' &&
                    typeof BaseContentGenerator !== 'undefined' &&
                    typeof RequirementsGenerator !== 'undefined' &&
                    typeof PlanningGenerator !== 'undefined' &&
                    typeof StoriesGenerator !== 'undefined' &&
                    typeof PromptsGenerator !== 'undefined' &&
                    typeof ReviewGenerator !== 'undefined' &&
                    typeof RequirementsHandler !== 'undefined' &&
                    typeof PlanningHandler !== 'undefined' &&
                    typeof StoriesHandler !== 'undefined' &&
                    typeof PromptsHandler !== 'undefined' &&
                    typeof ProjectHandler !== 'undefined';

                console.log(`Attempt ${retries + 1}: Checking modular services...`);
                console.log('Available services:', {
                    WorkflowContentServiceBundle: typeof WorkflowContentServiceBundle,
                    WorkflowContentService: typeof WorkflowContentService,
                    BaseContentGenerator: typeof BaseContentGenerator,
                    RequirementsGenerator: typeof RequirementsGenerator,
                    // Add more detailed logging
                    allServices: {
                        bundle: typeof WorkflowContentServiceBundle,
                        service: typeof WorkflowContentService,
                        base: typeof BaseContentGenerator,
                        reqGen: typeof RequirementsGenerator,
                        planGen: typeof PlanningGenerator,
                        storyGen: typeof StoriesGenerator,
                        promptGen: typeof PromptsGenerator,
                        reviewGen: typeof ReviewGenerator,
                        reqHandler: typeof RequirementsHandler,
                        planHandler: typeof PlanningHandler,
                        storyHandler: typeof StoriesHandler,
                        promptHandler: typeof PromptsHandler,
                        projectHandler: typeof ProjectHandler
                    }
                });

                if (!modularServiceAvailable) {
                    // Wait longer before retrying
                    await new Promise(resolve => setTimeout(resolve, 300));
                    retries++;
                }
            }

            console.log('Final check - Modular WorkflowContentService available:', modularServiceAvailable);

            // Initialize the workflow manager with new project flag
            if (window.workflowManager && modularServiceAvailable) {
                console.log('‚úÖ WorkflowContentService available, initializing normally');

                // Set the new project flag for the workflow manager
                window.workflowManager.isNewProject = newProject;

                // Hide fallback content since JavaScript is working
                const fallbackContent = document.getElementById('fallback-content');
                if (fallbackContent) {
                    fallbackContent.style.display = 'none';
                }

                // If this is a new project, automatically prompt for requirements analysis
                if (newProject) {
                    setTimeout(() => {
                        window.App.showNotification('Welcome to your new project! Let\'s start with requirements analysis.', 'info');
                        // The workflow manager will handle the rest
                    }, 1000);
                }
            } else {
                // Show fallback content if workflow manager or modular service fails to load
                console.warn('‚ùå WorkflowContentService not available after ' + retries + ' attempts. Showing fallback content.');
                console.log('Available global objects:', Object.keys(window).filter(key => key.includes('Service') || key.includes('Generator') || key.includes('Handler')));

                const fallbackContent = document.getElementById('fallback-content');
                if (fallbackContent && newProject) {
                    fallbackContent.style.display = 'block';
                }

                // Show error notification
                if (window.App && window.App.showNotification) {
                    window.App.showNotification('Workflow service not available. Using fallback mode.', 'warning');
                }
            }
        }

        // Enhanced workflow initialization with new project support
        window.addEventListener('load', function () {
            console.log('Window load event fired, starting workflow initialization...');
            console.log('Checking if modular scripts are loaded...');

            // Debug: Check what scripts are actually loaded
            const loadedScripts = document.querySelectorAll('script[src]');
            console.log('Loaded scripts:', Array.from(loadedScripts).map(s => s.src));

            // Debug: Check global objects
            console.log('Global objects check:', {
                WorkflowContentServiceBundle: typeof WorkflowContentServiceBundle,
                WorkflowContentService: typeof WorkflowContentService,
                BaseContentGenerator: typeof BaseContentGenerator,
                RequirementsGenerator: typeof RequirementsGenerator,
                PlanningGenerator: typeof PlanningGenerator,
                StoriesGenerator: typeof StoriesGenerator,
                PromptsGenerator: typeof PromptsGenerator,
                ReviewGenerator: typeof ReviewGenerator,
                RequirementsHandler: typeof RequirementsHandler,
                PlanningHandler: typeof PlanningHandler,
                StoriesHandler: typeof StoriesHandler,
                PromptsHandler: typeof PromptsHandler,
                ProjectHandler: typeof ProjectHandler
            });

            // Wait for all resources to be fully loaded
            setTimeout(() => {
                initializeWorkflow();
            }, 1500); // Increased to 1.5 seconds to ensure scripts are fully loaded
        });

        // Global function to handle requirements analysis (called from workflow.js)
        async function analyzeRequirements() {
            if (window.workflowManager) {
                return window.workflowManager.analyzeRequirements();
            }

            // Fallback for compatibility
            const requirements = prompt('Please describe your project requirements:\n\n' +
                'What problem are you trying to solve? What features do you need? ' +
                'What technology constraints do you have?');

            if (requirements) {
                alert('Requirements received: ' + requirements.substring(0, 100) + '...\n\n' +
                    'This will be processed once the workflow is fully loaded.');
            }
        }

        // Global function to handle project export (called from UI)
        function exportProject() {
            if (window.workflowManager) {
                return window.workflowManager.exportProject();
            }

            // Fallback
            showNotification('Export functionality coming soon', 'info');
        }

        // Manual requirements analysis function for fallback
        function startManualRequirementsAnalysis() {
            analyzeRequirements();
        }
    </script>
}
