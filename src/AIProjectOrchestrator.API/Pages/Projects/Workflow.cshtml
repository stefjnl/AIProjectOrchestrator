@page
@{
    ViewData["Title"] = "Project Workflow";
    var projectId = Request.Query["projectId"];
    var newProject = Request.Query["newProject"].ToString() == "true";
}

<div class="main-container">
    <div class="page-header">
        <div>
            <h1>Project Workflow</h1>
            <p class="subtitle">AI-powered development pipeline</p>
        </div>
        <div class="workflow-actions">
            <a href="/Projects" class="btn btn-secondary">‚Üê Back to Projects</a>
            <button class="btn btn-primary" onclick="exportProject()">
                <span>üì•</span> Export
            </button>
        </div>
    </div>

    <!-- Project Overview -->
    <div class="project-overview" id="project-overview">
        <div class="overview-card">
            <h3>Project Information</h3>
            <div class="overview-content">
                <div class="overview-item">
                    <span class="label">Name:</span>
                    <span class="value" id="project-name">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Status:</span>
                    <span class="value status" id="project-status">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Created:</span>
                    <span class="value" id="project-created">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Progress:</span>
                    <span class="value" id="project-progress">0%</span>
                </div>
            </div>
        </div>

        <!-- Provider Switching UI -->
        <div class="provider-control">
            <h3>AI Provider</h3>
            <div class="form-group">
                <select id="provider-select">
                    <option value="NanoGpt">NanoGpt</option>
                    <option value="OpenRouter">OpenRouter</option>
                </select>
                <button onclick="switchProvider()" id="switch-btn">Switch</button>
                <span id="provider-status">Loading...</span>
            </div>
        </div>

        <style>
            .provider-control {
                display: flex;
                align-items: center;
                gap: 10px;
                margin: 10px 0;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
                background: #f9f9f9;
            }

            .form-group {
                display: flex;
                gap: 5px;
            }

            select,
            button {
                padding: 5px 10px;
            }
        </style>

        <!-- Artifacts Panel Styles -->
        <style>
            .artifacts-panel {
                position: fixed;
                right: 0;
                top: 0;
                height: 100vh;
                width: 350px;
                background: white;
                border-left: 1px solid var(--color-gray-200);
                box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
                transform: translateX(0);
                transition: transform 0.3s ease;
                z-index: 1000;
                display: flex;
                flex-direction: column;
            }

            .panel-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 20px;
                border-bottom: 1px solid var(--color-gray-200);
                background: var(--color-gray-50);
                flex-shrink: 0;
            }

            .panel-header h3 {
                margin: 0;
                font-size: var(--text-lg);
                color: var(--color-gray-900);
                font-weight: var(--font-semibold);
            }

            .panel-toggle {
                background: none;
                border: none;
                font-size: var(--text-xl);
                cursor: pointer;
                color: var(--color-gray-600);
                transition: transform 0.3s ease;
                width: 32px;
                height: 32px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 4px;
                font-weight: var(--font-bold);
            }

            .panel-toggle:hover {
                background: var(--color-gray-200);
                color: var(--color-gray-900);
            }

            .panel-content {
                flex: 1;
                overflow-y: auto;
                padding: 20px;
                display: flex;
                flex-direction: column;
            }

            .artifact-item {
                margin-bottom: 16px;
                border: 1px solid var(--color-gray-200);
                border-radius: 8px;
                overflow: hidden;
                background: white;
                transition: all 0.2s ease;
            }

            .artifact-item:hover {
                border-color: var(--color-primary-300);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .artifact-item.expanded {
                border-color: var(--color-primary-500);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            }

            .artifact-header {
                padding: 16px 20px;
                background: var(--color-gray-50);
                display: flex;
                justify-content: space-between;
                align-items: center;
                cursor: pointer;
                transition: background-color 0.2s ease;
            }

            .artifact-header:hover {
                background: var(--color-gray-100);
            }

            .artifact-title {
                font-weight: var(--font-semibold);
                color: var(--color-gray-900);
                font-size: var(--text-sm);
            }

            .artifact-status {
                font-size: var(--text-xs);
                padding: 4px 8px;
                border-radius: 4px;
                background: var(--color-gray-200);
                color: var(--color-gray-700);
                font-weight: var(--font-medium);
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .artifact-status.approved {
                background: var(--color-success-500);
                color: white;
            }

            .artifact-status.pending {
                background: var(--color-warning-500);
                color: white;
            }

            .artifact-status.rejected {
                background: var(--color-danger-500);
                color: white;
            }

            .artifact-content {
                padding: 0 20px 20px;
                display: none;
            }

            .artifact-content[style*="display: block"] {
                display: block !important;
            }

            .artifact-details {
                margin-top: 16px;
                white-space: pre-wrap;
                word-break: break-word;
                font-family: var(--font-mono);
                font-size: var(--text-sm);
                line-height: 1.6;
                max-height: 300px;
                overflow-y: auto;
                background: var(--color-gray-50);
                padding: 16px;
                border-radius: 6px;
                border: 1px solid var(--color-gray-200);
                color: var(--color-gray-800);
            }

            .artifact-loading {
                text-align: center;
                padding: 20px;
                color: var(--color-gray-600);
                font-size: var(--text-sm);
            }

            .artifact-loading::after {
                content: '';
                display: inline-block;
                width: 16px;
                height: 16px;
                border: 2px solid var(--color-gray-300);
                border-top: 2px solid var(--color-primary-500);
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin-left: 8px;
                vertical-align: middle;
            }

            /* Collapsed state */
            .artifacts-panel.collapsed {
                transform: translateX(calc(100% - 40px));
            }

            .artifacts-panel.collapsed .panel-toggle {
                transform: rotate(180deg);
            }

            /* Panel toggle button in collapsed state */
            .artifacts-panel.collapsed .panel-toggle {
                background: var(--color-primary-500);
                color: white;
                border-radius: 4px 0 0 4px;
                width: 40px;
                height: 80px;
                position: absolute;
                left: -40px;
                top: 50%;
                transform: translateY(-50%);
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: var(--text-lg);
                box-shadow: -2px 0 8px rgba(0, 0, 0, 0.15);
                transition: all 0.3s ease;
            }

            .artifacts-panel.collapsed .panel-toggle:hover {
                background: var(--color-primary-600);
                transform: translateY(-50%) scale(1.05);
            }

            /* Mobile responsive styles */
            @@media (max-width: 768px) {
                .artifacts-panel {
                    width: 100%;
                    height: 300px;
                    bottom: 0;
                    top: auto;
                    border-top: 1px solid var(--color-gray-200);
                    border-left: none;
                    transform: translateY(0);
                    border-radius: 16px 16px 0 0;
                    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);
                }

                .artifacts-panel.collapsed {
                    transform: translateY(calc(100% - 40px));
                }

                .panel-toggle {
                    transform: rotate(90deg);
                }

                .artifacts-panel.collapsed .panel-toggle {
                    transform: rotate(-90deg);
                }

                /* Mobile toggle button positioning */
                .artifacts-panel.collapsed .panel-toggle {
                    top: -40px;
                    left: 50%;
                    transform: translateX(-50%);
                    width: 80px;
                    height: 40px;
                    border-radius: 4px 4px 0 0;
                }

                .panel-header {
                    padding: 16px;
                }

                .panel-content {
                    padding: 16px;
                }

                .artifact-header {
                    padding: 12px 16px;
                }

                .artifact-content {
                    padding: 0 16px 16px;
                }
            }

            /* Scrollbar styling for artifact details */
            .artifact-details::-webkit-scrollbar {
                width: 6px;
            }

            .artifact-details::-webkit-scrollbar-track {
                background: var(--color-gray-100);
                border-radius: 3px;
            }

            .artifact-details::-webkit-scrollbar-thumb {
                background: var(--color-gray-400);
                border-radius: 3px;
            }

            .artifact-details::-webkit-scrollbar-thumb:hover {
                background: var(--color-gray-500);
            }
        </style>

    </div>

    <!-- Workflow Pipeline -->
    <div class="workflow-pipeline">
        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-1">
                <span>1</span>
            </div>
            <div class="stage-title">Requirements</div>
            <div class="stage-description">Define project requirements</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-2">
                <span>2</span>
            </div>
            <div class="stage-title">Planning</div>
            <div class="stage-description">Technical architecture</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-3">
                <span>3</span>
            </div>
            <div class="stage-title">Stories</div>
            <div class="stage-description">User stories & tasks</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-4">
                <span>4</span>
            </div>
            <div class="stage-title">Prompt Review</div>
            <div class="stage-description">Review generated prompts</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-5">
                <span>5</span>
            </div>
            <div class="stage-title">Review</div>
            <div class="stage-description">Quality assurance</div>
        </div>
    </div>


    <!-- Stage Content -->
    <div class="stage-content" id="stage-content">
        <!-- Dynamic content will be loaded here based on current stage -->
        <!-- Fallback content for new projects - shown immediately -->
        <div id="fallback-content" style="display: block;">
            <div class="stage-container">
                <h2>Requirements Analysis</h2>
                <div class="empty-stage">
                    <div class="empty-icon">üöÄ</div>
                    <h3>Welcome to Your New Project!</h3>
                    <p>Let's start by analyzing your project requirements. Click the button below to begin.</p>
                    <div class="stage-actions">
                        <button class="btn btn-success btn-lg" onclick="startManualRequirementsAnalysis()"
                            style="font-size: 18px; padding: 15px 30px; background: #28a745; border-color: #28a745;">
                            üöÄ Start Requirements Analysis
                        </button>
                        <button class="btn btn-secondary" onclick="location.reload()">
                            üîÑ Refresh if Workflow Doesn't Load
                        </button>
                    </div>
                </div>
                <div class="getting-started-tips"
                    style="margin-top: 30px; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; color: white;">
                    <h4>üí° Getting Started Tips</h4>
                    <p>When you start requirements analysis, be prepared to describe:</p>
                    <ul style="text-align: left; margin: 15px 0;">
                        <li>üéØ The main problem your project solves</li>
                        <li>‚ú® Key features and functionality you need</li>
                        <li>üîß Technology preferences or constraints</li>
                        <li>‚è∞ Timeline and budget considerations</li>
                    </ul>
                    <p style="margin-top: 15px; font-style: italic;">Don't worry about being perfect - our AI will help
                        refine your requirements!</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Artifacts Side Panel -->
    <div class="artifacts-panel" id="artifactsPanel">
        <div class="panel-header">
            <h3>Generated Artifacts</h3>
            <button class="panel-toggle" id="panelToggle">‚ü®</button>
        </div>
        <div class="panel-content" id="panelContent">
            <div class="artifact-item" data-artifact="requirements">
                <div class="artifact-header">
                    <span class="artifact-title">Requirements Analysis</span>
                    <span class="artifact-status" id="requirements-status">Not Started</span>
                </div>
                <div class="artifact-content" id="requirements-content" style="display: none;">
                    <div class="artifact-loading" id="requirements-loading" style="display: none;">Loading...</div>
                    <div class="artifact-details" id="requirements-details"></div>
                </div>
            </div>
            <div class="artifact-item" data-artifact="planning">
                <div class="artifact-header">
                    <span class="artifact-title">Project Planning</span>
                    <span class="artifact-status" id="planning-status">Not Started</span>
                </div>
                <div class="artifact-content" id="planning-content" style="display: none;">
                    <div class="artifact-loading" id="planning-loading" style="display: none;">Loading...</div>
                    <div class="artifact-details" id="planning-details"></div>
                </div>
            </div>
            <div class="artifact-item" data-artifact="stories">
                <div class="artifact-header">
                    <span class="artifact-title">User Stories</span>
                    <span class="artifact-status" id="stories-status">Not Started</span>
                </div>
                <div class="artifact-content" id="stories-content" style="display: none;">
                    <div class="artifact-loading" id="stories-loading" style="display: none;">Loading...</div>
                    <div class="artifact-details" id="stories-details"></div>
                </div>
            </div>
            <div class="artifact-item" data-artifact="prompts">
                <div class="artifact-header">
                    <span class="artifact-title">Generated Prompts</span>
                    <span class="artifact-status" id="prompts-status">Not Started</span>
                </div>
                <div class="artifact-content" id="prompts-content" style="display: none;">
                    <div class="artifact-loading" id="prompts-loading" style="display: none;">Loading...</div>
                    <div class="artifact-details" id="prompts-details"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stage Navigation -->
    <div class="stage-navigation">
        <button class="btn btn-secondary" id="prev-stage" onclick="navigateStage(-1)" disabled>
            ‚Üê Previous
        </button>
        <span class="stage-counter" id="stage-counter">Loading stage...</span>
        <button class="btn btn-primary" id="next-stage" onclick="navigateStage(1)" disabled>
            Next ‚Üí
        </button>
    </div>
</div>

@section Scripts {
    <!-- Core services (load first) -->
    <script src="~/js/services/state-management.js"></script>
    <script src="~/js/services/stage-initialization.js"></script>
    <script src="~/js/services/event-handler.js"></script>

    <!-- Load the new modular WorkflowContentService -->
    <script src="~/js/services/workflow-content/base-content-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/requirements-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/planning-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/stories-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/prompts-generator.js"></script>
    <script src="~/js/services/workflow-content/stage-generators/review-generator.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/requirements-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/planning-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/stories-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/prompts-handler.js"></script>
    <script src="~/js/services/workflow-content/action-handlers/project-handler.js"></script>
    <script src="~/js/services/workflow-content/workflow-content-service.js"></script>
    <script src="~/js/services/workflow-content/service-bundle.js"></script>

    <!-- Main workflow manager (load last) -->
    <script src="~/js/workflow.js"></script>
    <script src="~/js/api.js"></script>
    
    <!-- Artifacts Panel JavaScript -->
    <script src="~/js/artifacts-panel.js"></script>
    
    <script>
        // Enhanced workflow initialization with new project support
        async function initializeWorkflow() {
            const urlParams = new URLSearchParams(window.location.search);
            const projectId = urlParams.get('projectId');
            const newProject = urlParams.get('newProject') === 'true';

            if (!projectId) {
                alert('Project ID is required');
                window.location.href = '/Projects';
                return;
            }

            console.log('Starting workflow initialization...');

            // Wait for all modular scripts to load with retry mechanism
            const maxRetries = 20; // Increased retries
            let retries = 0;
            let modularServiceAvailable = false;

            while (retries < maxRetries && !modularServiceAvailable) {
                // Check if the new modular WorkflowContentService is available
                modularServiceAvailable = typeof WorkflowContentServiceBundle !== 'undefined' &&
                    typeof WorkflowContentService !== 'undefined' &&
                    typeof BaseContentGenerator !== 'undefined' &&
                    typeof RequirementsGenerator !== 'undefined' &&
                    typeof PlanningGenerator !== 'undefined' &&
                    typeof StoriesGenerator !== 'undefined' &&
                    typeof PromptsGenerator !== 'undefined' &&
                    typeof ReviewGenerator !== 'undefined' &&
                    typeof RequirementsHandler !== 'undefined' &&
                    typeof PlanningHandler !== 'undefined' &&
                    typeof StoriesHandler !== 'undefined' &&
                    typeof PromptsHandler !== 'undefined' &&
                    typeof ProjectHandler !== 'undefined';

                console.log(`Attempt ${retries + 1}: Checking modular services...`);
                console.log('Available services:', {
                    WorkflowContentServiceBundle: typeof WorkflowContentServiceBundle,
                    WorkflowContentService: typeof WorkflowContentService,
                    BaseContentGenerator: typeof BaseContentGenerator,
                    RequirementsGenerator: typeof RequirementsGenerator,
                    // Add more detailed logging
                    allServices: {
                        bundle: typeof WorkflowContentServiceBundle,
                        service: typeof WorkflowContentService,
                        base: typeof BaseContentGenerator,
                        reqGen: typeof RequirementsGenerator,
                        planGen: typeof PlanningGenerator,
                        storyGen: typeof StoriesGenerator,
                        promptGen: typeof PromptsGenerator,
                        reviewGen: typeof ReviewGenerator,
                        reqHandler: typeof RequirementsHandler,
                        planHandler: typeof PlanningHandler,
                        storyHandler: typeof StoriesHandler,
                        promptHandler: typeof PromptsHandler,
                        projectHandler: typeof ProjectHandler
                    }
                });

                if (!modularServiceAvailable) {
                    // Wait longer before retrying
                    await new Promise(resolve => setTimeout(resolve, 300));
                    retries++;
                }
            }

            console.log('Final check - Modular WorkflowContentService available:', modularServiceAvailable);

            // Initialize the workflow manager with new project flag
            if (window.workflowManager && modularServiceAvailable) {
                console.log('‚úÖ WorkflowContentService available, initializing normally');

                // Set the new project flag for the workflow manager
                window.workflowManager.isNewProject = newProject;

                // Hide fallback content since JavaScript is working
                const fallbackContent = document.getElementById('fallback-content');
                if (fallbackContent) {
                    fallbackContent.style.display = 'none';
                }

                // If this is a new project, automatically prompt for requirements analysis
                if (newProject) {
                    setTimeout(() => {
                        window.App.showNotification('Welcome to your new project! Let\'s start with requirements analysis.', 'info');
                        // The workflow manager will handle the rest
                    }, 1000);
                }
            } else {
                // Show fallback content if workflow manager or modular service fails to load
                console.warn('‚ùå WorkflowContentService not available after ' + retries + ' attempts. Showing fallback content.');
                console.log('Available global objects:', Object.keys(window).filter(key => key.includes('Service') || key.includes('Generator') || key.includes('Handler')));

                const fallbackContent = document.getElementById('fallback-content');
                if (fallbackContent && newProject) {
                    fallbackContent.style.display = 'block';
                }

                // Show error notification
                if (window.App && window.App.showNotification) {
                    window.App.showNotification('Workflow service not available. Using fallback mode.', 'warning');
                }
            }
        }

        // Enhanced workflow initialization with new project support
        window.addEventListener('load', function () {
            console.log('Window load event fired, starting workflow initialization...');
            console.log('Checking if modular scripts are loaded...');

            // Debug: Check what scripts are actually loaded
            const loadedScripts = document.querySelectorAll('script[src]');
            console.log('Loaded scripts:', Array.from(loadedScripts).map(s => s.src));

            // Debug: Check global objects
            console.log('Global objects check:', {
                WorkflowContentServiceBundle: typeof WorkflowContentServiceBundle,
                WorkflowContentService: typeof WorkflowContentService,
                BaseContentGenerator: typeof BaseContentGenerator,
                RequirementsGenerator: typeof RequirementsGenerator,
                PlanningGenerator: typeof PlanningGenerator,
                StoriesGenerator: typeof StoriesGenerator,
                PromptsGenerator: typeof PromptsGenerator,
                ReviewGenerator: typeof ReviewGenerator,
                RequirementsHandler: typeof RequirementsHandler,
                PlanningHandler: typeof PlanningHandler,
                StoriesHandler: typeof StoriesHandler,
                PromptsHandler: typeof PromptsHandler,
                ProjectHandler: typeof ProjectHandler
            });

            // Wait for all resources to be fully loaded
            setTimeout(() => {
                initializeWorkflow();
            }, 1500); // Increased to 1.5 seconds to ensure scripts are fully loaded
        });

        // Global function to handle requirements analysis (called from workflow.js)
        async function analyzeRequirements() {
            if (window.workflowManager) {
                return window.workflowManager.analyzeRequirements();
            }

            // Fallback for compatibility
            const requirements = prompt('Please describe your project requirements:\n\n' +
                'What problem are you trying to solve? What features do you need? ' +
                'What technology constraints do you have?');

            if (requirements) {
                alert('Requirements received: ' + requirements.substring(0, 100) + '...\n\n' +
                    'This will be processed once the workflow is fully loaded.');
            }
        }

        // Global function to handle project export (called from UI)
        function exportProject() {
            if (window.workflowManager) {
                return window.workflowManager.exportProject();
            }

            // Fallback
            showNotification('Export functionality coming soon', 'info');
        }

        // Manual requirements analysis function for fallback
        function startManualRequirementsAnalysis() {
            analyzeRequirements();
        }

        // Provider switching JS
        async function loadProviders() {
            const select = document.getElementById('provider-select');
            const status = document.getElementById('provider-status');
            
            try {
                // Load available providers
                const response = await fetch('/api/ProviderManagement/providers');
                if (!response.ok) throw new Error('Failed to load providers');
                const providers = await response.json();
                select.innerHTML = providers.map(p => `<option value="${p}">${p}</option>`).join('');
                
                // Load current provider with fallback to OpenRouter
                const currentResponse = await fetch('/api/ProviderManagement/current');
                if (!currentResponse.ok) {
                    // Handle HTTP errors gracefully - fallback to OpenRouter
                    select.value = 'OpenRouter';
                    status.textContent = 'Using OpenRouter (default)';
                    return;
                }
                
                // Try to parse JSON, fall back to OpenRouter if it fails
                try {
                    const current = await currentResponse.json();
                    select.value = current;
                    status.textContent = `Using ${current}`;
                } catch (parseError) {
                    // If JSON parsing fails, use OpenRouter as default
                    select.value = 'OpenRouter';
                    status.textContent = 'Using OpenRouter (default)';
                }
            } catch (e) {
                // Handle network errors or other exceptions - fallback to OpenRouter
                if (select) {
                    select.innerHTML = '<option value="NanoGpt">NanoGpt</option><option value="OpenRouter" selected>OpenRouter</option><option value="Claude">Claude</option><option value="LMStudio">LMStudio</option>';
                }
                if (status) {
                    status.textContent = 'Using OpenRouter (default)';
                }
            }
        }

        async function switchProvider() {
            const provider = document.getElementById('provider-select').value;
            const btn = document.getElementById('switch-btn');
            const status = document.getElementById('provider-status');
            btn.disabled = true;
            status.textContent = 'Switching...';
            
            console.log(`switchProvider() called - switching to ${provider}...`);
            
            try {
                console.log(`Sending switch request to /api/ProviderManagement/switch for provider: ${provider}`);
                const response = await fetch('/api/ProviderManagement/switch', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ Provider: provider }),
                });
                
                console.log('Switch response status:', response.status);
                const responseText = await response.text();
                console.log('Switch response raw text:', responseText);
                
                if (response.ok) {
                    let result;
                    try {
                        result = JSON.parse(responseText);
                        console.log('Switch response JSON:', result);
                    } catch (parseError) {
                        console.log('Switch response is plain text:', responseText);
                        result = { message: responseText };
                    }
                    status.textContent = `‚úì Using ${provider}`;
                    console.log(`Successfully switched to ${provider}!`);
                } else {
                    console.error('Switch failed with status:', response.status, responseText);
                    status.textContent = '‚úó Switch failed';
                }
            } catch (e) {
                console.error('Switch error:', e);
                console.error('Switch error stack:', e.stack);
                status.textContent = `‚úó Switch failed: ${e.message}`;
            } finally {
                btn.disabled = false;
            }
        }

        // Load on DOM ready
        document.addEventListener('DOMContentLoaded', loadProviders);
    </script>
}