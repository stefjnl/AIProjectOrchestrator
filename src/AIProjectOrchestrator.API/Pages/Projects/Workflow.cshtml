@page
@{
    ViewData["Title"] = "Project Workflow";
    var projectId = Request.Query["projectId"];
    var newProject = Request.Query["newProject"].ToString() == "true";
}

<div class="container">
    <div class="page-header">
        <div>
            <h1>Project Workflow</h1>
            <p class="subtitle">AI-powered development pipeline</p>
        </div>
        <div class="workflow-actions">
            <a href="/Projects" class="btn btn-secondary">‚Üê Back to Projects</a>
            <button class="btn btn-primary" onclick="exportProject()">
                <span>üì•</span> Export
            </button>
        </div>
    </div>

    <!-- Project Overview -->
    <div class="project-overview" id="project-overview">
        <div class="overview-card">
            <h3>Project Information</h3>
            <div class="overview-content">
                <div class="overview-item">
                    <span class="label">Name:</span>
                    <span class="value" id="project-name">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Status:</span>
                    <span class="value status" id="project-status">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Created:</span>
                    <span class="value" id="project-created">Loading...</span>
                </div>
                <div class="overview-item">
                    <span class="label">Progress:</span>
                    <span class="value" id="project-progress">0%</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Workflow Pipeline -->
    <div class="workflow-pipeline">
        <div class="pipeline-stage">
            <div class="stage-indicator completed" id="stage-1">
                <span>1</span>
            </div>
            <div class="stage-title">Requirements</div>
            <div class="stage-description">Define project requirements</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator completed" id="stage-2">
                <span>2</span>
            </div>
            <div class="stage-title">Planning</div>
            <div class="stage-description">Technical architecture</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator active" id="stage-3">
                <span>3</span>
            </div>
            <div class="stage-title">Stories</div>
            <div class="stage-description">User stories & tasks</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-4">
                <span>4</span>
            </div>
            <div class="stage-title">Prompts</div>
            <div class="stage-description">Code generation</div>
        </div>

        <div class="pipeline-stage">
            <div class="stage-indicator" id="stage-5">
                <span>5</span>
            </div>
            <div class="stage-title">Review</div>
            <div class="stage-description">Quality assurance</div>
        </div>
    </div>

    <!-- Stage Content -->
    <div class="stage-content" id="stage-content">
        <!-- Dynamic content will be loaded here based on current stage -->
    </div>

    <!-- Stage Navigation -->
    <div class="stage-navigation">
        <button class="btn btn-secondary" id="prev-stage" onclick="navigateStage(-1)" disabled>
            ‚Üê Previous
        </button>
        <span class="stage-counter" id="stage-counter">Stage 3 of 5</span>
        <button class="btn btn-primary" id="next-stage" onclick="navigateStage(1)">
            Next ‚Üí
        </button>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const urlParams = new URLSearchParams(window.location.search);
            const projectId = urlParams.get('projectId');

            if (!projectId) {
                alert('Project ID is required');
                window.location.href = '/Projects';
                return;
            }

            loadProjectData(projectId);
            loadWorkflowStage(projectId, 3); // Start with Stories stage

            // Auto-refresh workflow status
            setInterval(() => loadWorkflowStatus(projectId), 10000);
        });

        let currentStage = 3;
        let projectData = {};

        async function loadProjectData(projectId) {
            try {
                projectData = await APIClient.getProject(projectId);

                // Update project overview
                document.getElementById('project-name').textContent = projectData.name;
                document.getElementById('project-status').textContent = projectData.status;
                document.getElementById('project-created').textContent =
                    new Date(projectData.createdAt).toLocaleDateString();

                // Update progress based on stages
                const progress = calculateProgress(projectData);
                document.getElementById('project-progress').textContent = `${progress}%`;

                // Update pipeline indicators
                updatePipelineIndicators(progress);

            } catch (error) {
                handleApiError(error, 'Failed to load project data');
            }
        }

        function calculateProgress(project) {
            // Mock progress calculation based on project data
            // In real implementation, this would check actual stage completion
            const stages = ['requirements', 'planning', 'stories', 'prompts', 'review'];
            let completed = 0;

            stages.forEach(stage => {
                if (project[stage]?.completed) completed++;
            });

            return Math.round((completed / stages.length) * 100);
        }

        function updatePipelineIndicators(progress) {
            const stages = ['stage-1', 'stage-2', 'stage-3', 'stage-4', 'stage-5'];

            stages.forEach((stageId, index) => {
                const stage = document.getElementById(stageId);
                const stageProgress = ((index + 1) / 5) * 100;

                if (progress >= stageProgress) {
                    stage.classList.add('completed');
                    stage.classList.remove('active');
                } else if (index === Math.floor(progress / 20)) {
                    stage.classList.add('active');
                    stage.classList.remove('completed');
                } else {
                    stage.classList.remove('completed', 'active');
                }
            });
        }

        async function loadWorkflowStage(projectId, stage) {
            currentStage = stage;

            // Update stage counter
            document.getElementById('stage-counter').textContent = `Stage ${stage} of 5`;

            // Update navigation buttons
            document.getElementById('prev-stage').disabled = stage === 1;
            document.getElementById('next-stage').textContent = stage === 5 ? 'Complete' : 'Next ‚Üí';

            // Load stage-specific content
            const content = await getStageContent(projectId, stage);
            document.getElementById('stage-content').innerHTML = content;
        }

        function getStageContent(projectId, stage) {
            const templates = {
                1: getRequirementsStage,
                2: getPlanningStage,
                3: getStoriesStage,
                4: getPromptsStage,
                5: getReviewStage
            };

            return templates[stage] ? templates[stage](projectId) : '<p>Stage not found</p>';
        }

        function getRequirementsStage(projectId) {
            return `
                    <div class="stage-container">
                        <h2>Requirements Analysis</h2>
                        <div class="requirements-content">
                            <div class="requirements-list" id="requirements-list">
                                <!-- Requirements will be loaded here -->
                            </div>
                            <div class="requirements-actions">
                                <button class="btn btn-primary" onclick="analyzeRequirements()">
                                    üîÑ Re-analyze Requirements
                                </button>
                            </div>
                        </div>
                    </div>
                `;
        }

        function getPlanningStage(projectId) {
            return `
                    <div class="stage-container">
                        <h2>Project Planning</h2>
                        <div class="planning-content">
                            <div class="architecture-overview" id="architecture-overview">
                                <!-- Architecture will be loaded here -->
                            </div>
                            <div class="planning-actions">
                                <button class="btn btn-primary" onclick="regeneratePlan()">
                                    üîÑ Regenerate Plan
                                </button>
                            </div>
                        </div>
                    </div>
                `;
        }

        function getStoriesStage(projectId) {
            return `
                    <div class="stage-container">
                        <h2>User Stories</h2>
                        <div class="stories-content">
                            <div class="stories-controls">
                                <button class="btn btn-primary" onclick="generateStories()">
                                    ‚ú® Generate Stories
                                </button>
                            </div>
                            <div class="stories-list" id="stories-list">
                                <!-- Stories will be loaded here -->
                            </div>
                        </div>
                    </div>
                `;
        }

        function getPromptsStage(projectId) {
            return `
                    <div class="stage-container">
                        <h2>Prompt Generation</h2>
                        <div class="prompts-content">
                            <div class="prompts-list" id="prompts-list">
                                <!-- Prompts will be loaded here -->
                            </div>
                            <div class="prompts-actions">
                                <button class="btn btn-primary" onclick="generateAllPrompts()">
                                    üöÄ Generate All Prompts
                                </button>
                            </div>
                        </div>
                    </div>
                `;
        }

        function getReviewStage(projectId) {
            return `
                    <div class="stage-container">
                        <h2>Final Review</h2>
                        <div class="review-content">
                            <div class="review-summary" id="review-summary">
                                <!-- Review summary will be loaded here -->
                            </div>
                            <div class="review-actions">
                                <button class="btn btn-success" onclick="completeProject()">
                                    ‚úÖ Complete Project
                                </button>
                                <button class="btn btn-secondary" onclick="exportProject()">
                                    üì• Export Results
                                </button>
                            </div>
                        </div>
                    </div>
                `;
        }

        async function navigateStage(direction) {
            const newStage = currentStage + direction;

            if (newStage >= 1 && newStage <= 5) {
                await loadWorkflowStage(projectId, newStage);
            }
        }

        async function loadWorkflowStatus(projectId) {
            try {
                const status = await APIClient.getWorkflowStatus(projectId);
                // Update UI based on status changes
                console.log('Workflow status updated:', status);
            } catch (error) {
                console.error('Failed to load workflow status:', error);
            }
        }

        // Placeholder functions for stage actions
        async function analyzeRequirements() {
            showNotification('Analyzing requirements...', 'info');
            // Implementation for requirements analysis
        }

        async function regeneratePlan() {
            showNotification('Regenerating project plan...', 'info');
            // Implementation for plan regeneration
        }

        async function generateStories() {
            showNotification('Generating user stories...', 'info');
            // Implementation for story generation
        }

        async function generateAllPrompts() {
            showNotification('Generating all prompts...', 'info');
            // Implementation for prompt generation
        }

        async function completeProject() {
            showNotification('Completing project...', 'info');
            // Implementation for project completion
        }

        function exportProject() {
            showNotification('Exporting project...', 'info');
            // Implementation for project export
        }

        // Add CSS for workflow stages
        const style = document.createElement('style');
        style.textContent = `
                .page-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: flex-start;
                    margin-bottom: 2rem;
                }
            
                .page-header h1 {
                    margin: 0;
                    font-size: 2rem;
                }
            
                .page-header .subtitle {
                    margin: 0.5rem 0 0 0;
                    color: var(--color-gray-600);
                }
            
                .workflow-actions {
                    display: flex;
                    gap: 0.5rem;
                }
            
                .project-overview {
                    margin-bottom: 2rem;
                }
            
                .overview-card {
                    background: white;
                    border-radius: 12px;
                    padding: 1.5rem;
                    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
                    border: 1px solid var(--color-gray-200);
                }
            
                .overview-card h3 {
                    margin-bottom: 1rem;
                    color: var(--color-gray-900);
                }
            
                .overview-content {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 1rem;
                }
            
                .overview-item {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 0.5rem 0;
                    border-bottom: 1px solid var(--color-gray-100);
                }
            
                .overview-item:last-child {
                    border-bottom: none;
                }
            
                .overview-item .label {
                    font-weight: 500;
                    color: var(--color-gray-600);
                }
            
                .overview-item .value {
                    font-weight: 500;
                    color: var(--color-gray-900);
                }
            
                .overview-item .value.status {
                    padding: 0.25rem 0.75rem;
                    border-radius: 20px;
                    font-size: 0.75rem;
                    background: var(--color-success-100);
                    color: var(--color-success-700);
                }
            
                .stage-container {
                    background: white;
                    border-radius: 12px;
                    padding: 2rem;
                    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
                    border: 1px solid var(--color-gray-200);
                    margin-bottom: 2rem;
                }
            
                .stage-container h2 {
                    margin-bottom: 1.5rem;
                    color: var(--color-gray-900);
                }
            
                .stage-navigation {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 1rem 0;
                }
            
                .stage-counter {
                    font-weight: 500;
                    color: var(--color-gray-600);
                }
            
                .requirements-content,
                .planning-content,
                .stories-content,
                .prompts-content,
                .review-content {
                    margin-top: 1.5rem;
                }
            
                .requirements-list,
                .stories-list,
                .prompts-list,
                .review-summary {
                    background: var(--color-gray-50);
                    border-radius: 8px;
                    padding: 1.5rem;
                    margin-bottom: 1rem;
                    min-height: 200px;
                }
            
                .requirements-actions,
                .planning-actions,
                .stories-controls,
                .prompts-actions,
                .review-actions {
                    display: flex;
                    gap: 1rem;
                    justify-content: flex-start;
                }
            
                @@media (max-width: 768px) {
                    .page-header {
                        flex-direction: column;
                        gap: 1rem;
                    }
                
                    .workflow-actions {
                        width: 100%;
                        justify-content: flex-start;
                    }
                
                    .overview-content {
                        grid-template-columns: 1fr;
                    }
                
                    .stage-navigation {
                        flex-direction: column;
                        gap: 1rem;
                    }
                
                    .stage-navigation .btn {
                        width: 100%;
                    }
                }
            `;
        document.head.appendChild(style);
    </script>
}